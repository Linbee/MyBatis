Mybatis学习笔记
持久层框架 数据库交互
Hibernate 全自动全映射ORM(Object Relation Mapping)框架 旨在消除sql HQL编写sql语句
Mybatis 半自动轻量级框架 sql与java编码分离，sql受开发人员控制

在github下载mybatis

http://www.mybatis.org/mybatis-3 文档地址
https://github.com/mybatis/mybatis-3/releases jar包下载地址
https://mvnrepository.com/artifact/mysql/mysql-connector-java jdbc 下载

课外发现
source folder 和 folder 的区别
source folder 所有Java源文件都会被时时编译成class文件。对于JavaSE的项目会被编译到项目目录下的bin目录下，对于JavaEE项目会被编译到相应的/WEB-INF/classes文件
夹中 其他文件也会移到到相应的目录下
folder 文件夹

2018 7 11

dtd 文档类型定义(Document Type Definition)是一套为了进行程序间的数据交换而建立的关于标记符的语法规则。文档可根据某种DTD语法规则验证格式是否符合此规则。文档类型定义也可用做保证标准通用标记语言、可扩展标记语言文档格式的合法性，可通过比较文档和文档类型定义文件来检查文档是否符合规范，元素和标签使用是否正确。

MyBatis全局配置文件
	properties 用来引入外部的properties文件
		:resource 用来引入类路径下的资源
		:url		 用来引入网络路径或者磁盘路径下的资源
	
	settings 一个重要的标签 ！
		setting 用来设置每一个设置项
			:name 项名
			:value false/true

	typeAliases 为java类起别名 别名不区分大小写
		typeAlias
			:type 需要起别名的类的全类名 默认别名是类名小写
			:alias 新的别名
		package
			:name 指定包名（当前包以及下面的所有的后代包的每一个类起一个默认的别名 类名小写） 别名有可能冲突报错
			在类使用@Alias注解 为某个类指定新的别名 解决冲突
	typeHandler 映射java的数据类型和sql的数据类型
	
	environments 配置多种环境
		:default 切换环境 
		environment 配置一个具体的环境信息
			transactionManager 事务管理器
				:id 当前环境的唯一标示
				:type 事务管理器的类型 JDBC|MANAGED
					  自定义事务管理器，实现TransactionFactory接口 type指定的全类名
			dataSource  数据源
				:type 数据源类型 UNPOOLED|POOLED|JNDI 不使用连接池 使用连接池 使用JNDI
				自定义数据源 实现DataSourceFactory接口
	
	databaseldProvider 使得MyBatis支持多种不同数据库 
		:type type=DB_VENDOR" 得到数据库厂商的标识
		property
			:name 数据库厂商标识
			:vallue 标识别名
	
	mappers 将sql映射注册到全局配置中
		mapper 注册一个sql映射
			:resource 引用类路径下的sql映射文件
			:url 引用网路路径或者磁盘路径下的sql映射文件
			
			:class 引用接口
				1.有sql映射文件,映射文件必须和接口同名,并且放在与接口同一路径下
				2.没有sql映射文件,所有的sql都是利用注解写在接口上
		package
			:name 包名
MyBatis 映射文件
	映射文件结构
		<!DOCTYPE mapper
		 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		 <mapper namespace="xxx" ></mapper>
		 文件结构一定要完整 否则会报错
	MyBatis支持返回 Boolean Integer Long void	
	
	MyBatis接口编程步骤
		1 实体类对应的映射文件
		2 实体类的接口方法
		3 将实体类的映射文件中的 mapper：namespace 与接口类绑定 namespace=接口类名
		4 将实体类的映射文件中的方法id 与 为接口类中的方法名 相同
		
		5用sqlSession的getMapper方法初始化对应的接口类  eg：Objece employeeDao=sqlSession.getMapper(Object.class);
		6调用接口类对应的方法
		
	insert 获取自增主键
		:useGeneratedKeys="true"
		:keyProperty="" 实体类对应的变量名;
		
2018 07 12 MyBatis参数处理
	单个参数 MyBatis不会做任何处理
	多个参数 默认多个参数会被封装成一个map
			 key: param1 param2 ... paramN 或者参数的索引也可以
			 value: 传入的参数值
			 
			 明确指定封装参数的map的key: @Param("id")
			 eg public Employee getEmployeeByIdAndLastName(@Param("id")int id,@Param("lastName")String lastName);
			 
			POJO
				如果多个参数正好是我们业务逻辑的数据模型(存在实体类) 我们就可以直接传入pojo
				#{属性名},去出传入的pojo的属性值
			
			Map
				如果过个参数不是业务模型中的数据,没有对应的pojo 不经常使用,我们可以直接传入map
				#{key} 去出map中的值
				
				如果多个参数不是业务模型中的数据,但是经常使用,推荐来编写一个TO(Transfer Object) 数据传输对象 如 Page{int index,int size}
				
				如果是Collection(List Set)类型或者是数组也会特殊处理
				,也是把传入的list或者数组封装在map中.
				key: Collection (collection) 如果是List还可以使用Key(list) 数组(array)
				eg: public Employee getEmpById(List<Integer> ids);
						取第一个值 #{list[0]}
						
	#{}和${}的区别
		#{} 是以预编译的形式,将参数设置到sql语句中 防止sql注入
		${} 取出的值直接拼装到sql语句中; 会有安全问题
				
		原生jdbc不支持占位符的地方我们就可以使用${}进行取值
		比如 分表,排序 
				
	#{}更丰富的用法
		javaType jdbcType mode(存储过程) numericScale
		resultMap typeHandler jdbcTypeName expression(待完善)
				
		jdbcType通常需要在某种特定的条件下被设置
		在我们数据为null时,有些数据库可能不识别mybatis对null的处理,比如oracle
		jdbcType OTHER 无效的类型 因为mybatis对所有的null都映射的是原生jdbc的OTHER类型
					
		有两种解决办法
		1 #{email,jdbcType=NULL}
		2.全局配置文件 jdbcTypeForNull=NULL
		
		:resultType 如果返回的是一个集合 要写集合中的元素类型 mybatis会自动添加到集合中
		可以填写类型的别名 resultType="map"
		
		返回多条封装一个map Map<Integer,Object> key是这个记录的主键 value是对应的类
		@MapKey("id") //告诉mybatis使用哪个属性作为map的key
		public Map<Integer,Employee> getEmployeeByLastNameLikeReturnMap(String lastName);
	
	resultMap
		:type 类名
		:id 唯一标签
		id 主键标签
			:column 对应列名
			:property 对应的javaBean属性
		result
			:column 
			:property
		collection 定义集合类型的属性的封装规则 一对多
			:property 属性名
			:javaType java类型
			:select 表明当前属性是调用select指定的方法查出结果的
					流程 使用select指定的方法(传入的column指定的这列参数的值) 查出对象,并封装给property指定的属性
			:column 要传入的值所属的列名 {prop1=col1,prop2=col2}
			:fetch eager 立即
				   lazy 延迟
	
		association  定义类的属性的封装规则 一对一
			:property 属性名
			:javaType java类型
			:select 表明当前属性是调用select指定的方法查出结果的
					流程 使用select指定的方法(传入的column指定的这列参数的值) 查出对象,并封装给property指定的属性
			:column 要传入的值所属的列名 {prop1=col1,prop2=col2}
			:fetch eager 立即
				   lazy 延迟
		
		discriminator 鉴别器 判断某列的值 然后根据某个列的值改变封装行为
			:column 要判断的列
			:javaType 列值对应的java类型
			case
				:value 列的值
				:resultType/resultMap 指定封装的结果类型
	
	select
		:resultMap 自定义结果集映射规则 区分大小写
	联合查询 级联属性 方法
		1 自定义 resultMap
		2 resultMap
			association 
				:property 属性名
				:javaType java类型
				:select 表明当前属性是调用select指定的方法查出结果的
					流程 使用select指定的方法(传入的column指定的这列参数的值) 查出对象,并封装给property指定的属性
				:column 要传入的值所属的列名
	
		延迟加载 在需要用到某个信息的时候才去查询 节省数据库资源
		如何设置延迟加载
			全局配置文件配置 lazyLoadingEnabled true aggressiveLazyLoading false
			
			
MyBatis的动态SQL
	OGNL 会进行字符串和数字的转化
		特殊符号去写转义字符
	if
		:test 使用OGNL语法
		查询时候可能存在拼装错误
		解决方法
			1 where后面加上1=1 以后的条件都是 and xxx 
			2 使用where 标签
	where 封装查询条件 搭配使用更佳
		where 只会去掉多一个 第一个多出来的and/or
	
	trim
		:prefix 前缀 trim标签中是整个字符串拼穿串后的结果
					 prefix是个拼串后的整个字符串加一个前缀
		
		:prefixOverrides 前缀覆盖 去掉整个字符串前面多余的字符
		
		:suffix 后缀 给整个字符串加一个后缀
		:suffixOverrides 后缀覆盖 去掉整个字符串后面多余的字符
	
	set 动态更新
	
	choose 分支选择
		when
		otherwise
	
	foreach 遍历传入的元素
	
	mybatis 拥有内置的两个参数
		_parameter 代表整个参数
			单个参数 _parameter就是这个参数
			多个参数 参数会被封装成map _parameter就代表这个map
			
		_databaseId
			如果配置了databaseIdProvider标签 _databaseId就代表当前数据库的别名


2018 7 14 小计
mysql的jdbc 使用allowMultiQueries=true 允许使用;来分隔多条语句





